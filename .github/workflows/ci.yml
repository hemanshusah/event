name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Lint and format check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint backend
        run: |
          cd backend/api-gateway
          npm run lint

      - name: Lint web admin
        run: |
          cd web-admin
          npm run lint

      - name: Lint mobile apps
        run: |
          cd mobile-apps/ios
          npm run lint

  # Backend tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          cd backend/api-gateway
          cp env.example .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          npm run db:migrate

      - name: Run backend tests
        run: |
          cd backend/api-gateway
          npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/api-gateway/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run web admin tests
        run: |
          cd web-admin
          npm test -- --coverage --watchAll=false

      - name: Upload web admin coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./web-admin/coverage/lcov.info
          flags: web-admin
          name: web-admin-coverage

  # Mobile tests
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run mobile tests
        run: |
          cd mobile-apps/ios
          npm test -- --coverage --watchAll=false

      - name: Upload mobile coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile-apps/ios/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          cd backend/api-gateway && npm audit --audit-level moderate
          cd ../../web-admin && npm audit --audit-level moderate
          cd ../mobile-apps/ios && npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Build applications
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, backend-tests, frontend-tests, mobile-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: |
          cd backend/api-gateway
          npm run build

      - name: Build web admin
        run: |
          cd web-admin
          npm run build

      - name: Build mobile apps
        run: |
          cd mobile-apps/ios
          npm run build:ios

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/api-gateway/dist/
            web-admin/build/
            mobile-apps/ios/ios/build/

  # Docker build and push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/api-gateway
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/growth-catalyst-api:latest
            ${{ secrets.DOCKER_USERNAME }}/growth-catalyst-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push web admin image
        uses: docker/build-push-action@v5
        with:
          context: ./web-admin
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/growth-catalyst-web:latest
            ${{ secrets.DOCKER_USERNAME }}/growth-catalyst-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, backend-tests, frontend-tests, mobile-tests, build]
    if: failure()
    steps:
      - name: Notify team
        run: |
          echo "CI/CD pipeline failed. Please check the logs."
          # Add notification logic here (Slack, email, etc.)
